{
  "address": "0x0e4Da0cf4dd7a3Cb7aA6Bc9882C6C3A7cEeb35d7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "governance_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vestingContractTarget_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "Disallowed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "governance",
          "type": "address"
        }
      ],
      "name": "SetGovernance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vestingContract",
          "type": "address"
        }
      ],
      "name": "VestingContractDeployed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_SUPPLY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newGovernance",
          "type": "address"
        }
      ],
      "name": "changeGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cliffPeriod",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "durationPeriod",
              "type": "uint256"
            }
          ],
          "internalType": "struct Libra.Recipient",
          "name": "recipient",
          "type": "tuple"
        }
      ],
      "name": "deployNewVestingContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingGovernance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "name": "rescueTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vestingContractTarget",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3cf190cc721b37e5fed139556064ddc46d096c807e186ea19f53853f8dbb5ec8",
  "receipt": {
    "to": null,
    "from": "0x0782a1e303F8D8DdaE98ffdf56D8142E8B19217f",
    "contractAddress": "0x0e4Da0cf4dd7a3Cb7aA6Bc9882C6C3A7cEeb35d7",
    "transactionIndex": 0,
    "gasUsed": "1670948",
    "logsBloom": "0x
    "blockHash": "0x426380072585428633ed703a875ebf1ff77ceaa10cd72530ae0dbc97883096c0",
    "transactionHash": "0x3cf190cc721b37e5fed139556064ddc46d096c807e186ea19f53853f8dbb5ec8",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 481708,
        "transactionHash": "0x3cf190cc721b37e5fed139556064ddc46d096c807e186ea19f53853f8dbb5ec8",
        "address": "0x0e4Da0cf4dd7a3Cb7aA6Bc9882C6C3A7cEeb35d7",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000782a1e303f8d8ddae98ffdf56d8142e8b19217f"
        ],
        "data": "0x00000000000000000000000000000000000000000052b7d2dcc80cd2e4000000",
        "logIndex": 0,
        "blockHash": "0x426380072585428633ed703a875ebf1ff77ceaa10cd72530ae0dbc97883096c0"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 481708,
        "transactionHash": "0x3cf190cc721b37e5fed139556064ddc46d096c807e186ea19f53853f8dbb5ec8",
        "address": "0x0e4Da0cf4dd7a3Cb7aA6Bc9882C6C3A7cEeb35d7",
        "topics": [
          "0x24a8c4807b324a269a51827c3446b8ac1cc13810d7d0c0ca1efafabddd7b6219",
          "0x0000000000000000000000000782a1e303f8d8ddae98ffdf56d8142e8b19217f"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x426380072585428633ed703a875ebf1ff77ceaa10cd72530ae0dbc97883096c0"
      }
    ],
    "blockNumber": 481708,
    "cumulativeGasUsed": "1670948",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0782a1e303F8D8DdaE98ffdf56D8142E8B19217f",
    "0x1a72faBA1ec2dC20c0b213C49B91B1361A518991"
  ],
  "numDeployments": 1,
  "solcInputHash": "e66dcf9bc4b876d6ff1b7db48cbd39ff",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governance_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vestingContractTarget_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"Disallowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"governance\",\"type\":\"address\"}],\"name\":\"SetGovernance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vestingContract\",\"type\":\"address\"}],\"name\":\"VestingContractDeployed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGovernance\",\"type\":\"address\"}],\"name\":\"changeGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"durationPeriod\",\"type\":\"uint256\"}],\"internalType\":\"struct Libra.Recipient\",\"name\":\"recipient\",\"type\":\"tuple\"}],\"name\":\"deployNewVestingContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingGovernance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"rescueTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingContractTarget\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptGovernance()\":{\"details\":\"`changeGovernance` must be called first to set `pendingGovernance`\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"changeGovernance(address)\":{\"details\":\"Only governance can call this function. The new governance must call `acceptGovernance` after.\",\"params\":{\"newGovernance\":\"new address to become the governance\"}},\"constructor\":{\"params\":{\"governance_\":\"address of the governance who will own this contract by the governance.\",\"vestingContractTarget_\":\"logic contract of Vesting.sol to use for cloning\"}},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"deployNewVestingContract((address,uint256,uint256,uint256,uint256))\":{\"params\":{\"recipient\":\"Recipient of the token through the vesting schedule.\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"rescueTokens(address,address,uint256)\":{\"details\":\"Method to claim junk and accidentally sent tokens. This will be only used to rescue tokens that are mistakenly sent by users to this contract.\",\"params\":{\"balance\":\"Amount to transfer out. Set to 0 to select all available amount.\",\"to\":\"Destination address that will receive the tokens.\",\"token\":\"Address of the ERC20 token to transfer out. Set to address(0) to transfer ether instead.\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"}},\"title\":\"libra DAO token\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptGovernance()\":{\"notice\":\"Accept the new role of governance\"},\"changeGovernance(address)\":{\"notice\":\"Changes governance of this contract\"},\"constructor\":{\"notice\":\"Initializes SDL token with specified governance address and recipients. For vesting durations and amounts, please refer to our documentation on token distribution schedule.\"},\"deployNewVestingContract((address,uint256,uint256,uint256,uint256))\":{\"notice\":\"Deploys a clone of the vesting contract for the given recipient. Details about vesting and token release schedule can be found on https://docs.libra.finance\"},\"rescueTokens(address,address,uint256)\":{\"notice\":\"Transfers any stuck tokens or ether out to the given destination.\"}},\"notice\":\"A token that is deployed with fixed amount and appropriate vesting contracts. Transfer is blocked for a period of time until the governance can toggle the transferability.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Libra.sol\":\"Libra\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-4.2.0/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xa3bbab77849522b73d8c6cd3d2ac54bef7580e4354484f35f4cabf55d3d2b3f9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-4.2.0/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x418cfe64226a974419f8ab7287ad4bb413156a4d7af8ab5d9bcaa5678d1a2f22\",\"license\":\"MIT\"},\"@openzeppelin/contracts-4.2.0/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-4.2.0/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-4.2.0/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-4.2.0/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-4.2.0/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-4.2.0/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute.\\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0x2cc1535d318fe533ffa4ad30de28f5abed305ff748bc72d0344072ac10007e29\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable-4.2.0/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"contracts/Libra.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts-4.2.0/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-4.2.0/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-4.2.0/proxy/Clones.sol\\\";\\nimport \\\"./Vesting.sol\\\";\\nimport \\\"./SimpleGovernance.sol\\\";\\n\\n/**\\n * @title libra DAO token\\n * @notice A token that is deployed with fixed amount and appropriate vesting contracts.\\n * Transfer is blocked for a period of time until the governance can toggle the transferability.\\n */\\ncontract Libra is ERC20, SimpleGovernance {\\n    using SafeERC20 for IERC20;\\n\\n    // Token max supply is 100,000,000 * 1e18 = 1e27\\n    uint256 public constant MAX_SUPPLY = 1e8 ether;\\n    address public immutable vestingContractTarget;\\n\\n    event Disallowed(address indexed target);\\n    event VestingContractDeployed(\\n        address indexed beneficiary,\\n        address vestingContract\\n    );\\n\\n    struct Recipient {\\n        address to;\\n        uint256 amount;\\n        uint256 startTimestamp;\\n        uint256 cliffPeriod;\\n        uint256 durationPeriod;\\n    }\\n\\n    /**\\n     * @notice Initializes SDL token with specified governance address and recipients. For vesting\\n     * durations and amounts, please refer to our documentation on token distribution schedule.\\n     * @param governance_ address of the governance who will own this contract\\n     * by the governance.\\n     * @param vestingContractTarget_ logic contract of Vesting.sol to use for cloning\\n     */\\n    constructor(\\n        address governance_,\\n        address vestingContractTarget_\\n    ) public ERC20(\\\"Libra DAO\\\", \\\"LIB\\\") {\\n        require(governance_ != address(0), \\\"SDL: governance cannot be empty\\\");\\n        require(\\n            vestingContractTarget_ != address(0),\\n            \\\"LIB: vesting contract target cannot be empty\\\"\\n        );\\n\\n        // Set state variables\\n        vestingContractTarget = vestingContractTarget_;\\n        governance = governance_;\\n\\n        // Mint tokens to governance\\n        _mint(governance, MAX_SUPPLY);\\n        emit SetGovernance(governance_);\\n    }\\n\\n    /**\\n     * @notice Deploys a clone of the vesting contract for the given recipient. Details about vesting and token\\n     * release schedule can be found on https://docs.libra.finance\\n     * @param recipient Recipient of the token through the vesting schedule.\\n     */\\n    function deployNewVestingContract(Recipient memory recipient)\\n        public\\n        onlyGovernance\\n        returns (address)\\n    {\\n        require(\\n            recipient.durationPeriod > 0,\\n            \\\"LIB: duration for vesting cannot be 0\\\"\\n        );\\n\\n        // Deploy a clone rather than deploying a whole new contract\\n        Vesting vestingContract = Vesting(Clones.clone(vestingContractTarget));\\n\\n        // Initialize the clone contract for the recipient\\n        vestingContract.initialize(\\n            address(this),\\n            recipient.to,\\n            recipient.startTimestamp,\\n            recipient.cliffPeriod,\\n            recipient.durationPeriod\\n        );\\n\\n        // Send tokens to the contract\\n        IERC20(address(this)).safeTransferFrom(\\n            msg.sender,\\n            address(vestingContract),\\n            recipient.amount\\n        );\\n\\n        emit VestingContractDeployed(recipient.to, address(vestingContract));\\n\\n        return address(vestingContract);\\n    }\\n\\n    /**\\n     * @notice Transfers any stuck tokens or ether out to the given destination.\\n     * @dev Method to claim junk and accidentally sent tokens. This will be only used to rescue\\n     * tokens that are mistakenly sent by users to this contract.\\n     * @param token Address of the ERC20 token to transfer out. Set to address(0) to transfer ether instead.\\n     * @param to Destination address that will receive the tokens.\\n     * @param balance Amount to transfer out. Set to 0 to select all available amount.\\n     */\\n    function rescueTokens(\\n        IERC20 token,\\n        address payable to,\\n        uint256 balance\\n    ) external onlyGovernance {\\n        require(to != address(0), \\\"LIB: invalid recipient\\\");\\n\\n        if (token == IERC20(address(0))) {\\n            // for Ether\\n            uint256 totalBalance = address(this).balance;\\n            balance = balance == 0\\n                ? totalBalance\\n                : Math.min(totalBalance, balance);\\n            require(balance > 0, \\\"LIB: trying to send 0 ETH\\\");\\n            // slither-disable-next-line arbitrary-send\\n            (bool success, ) = to.call{value: balance}(\\\"\\\");\\n            require(success, \\\"LIB: ETH transfer failed\\\");\\n        } else {\\n            // any other erc20\\n            uint256 totalBalance = token.balanceOf(address(this));\\n            balance = balance == 0\\n                ? totalBalance\\n                : Math.min(totalBalance, balance);\\n            require(balance > 0, \\\"LIB: trying to send 0 balance\\\");\\n            token.safeTransfer(to, balance);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x60ba44e8c95faef96398e981a983c2bbc67555b1fa72ca6c1824f710aeed593c\",\"license\":\"MIT\"},\"contracts/SimpleGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts-4.2.0/utils/Context.sol\\\";\\n\\nabstract contract SimpleGovernance is Context {\\n    address public governance;\\n    address public pendingGovernance;\\n\\n    event SetGovernance(address indexed governance);\\n\\n    /**\\n     * @notice Changes governance of this contract\\n     */\\n    modifier onlyGovernance() {\\n        require(\\n            _msgSender() == governance,\\n            \\\"only governance can perform this action\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Changes governance of this contract\\n     * @dev Only governance can call this function. The new governance must call `acceptGovernance` after.\\n     * @param newGovernance new address to become the governance\\n     */\\n    function changeGovernance(address newGovernance) external onlyGovernance {\\n        require(\\n            newGovernance != governance,\\n            \\\"governance must be different from current one\\\"\\n        );\\n        require(newGovernance != address(0), \\\"governance cannot be empty\\\");\\n        pendingGovernance = newGovernance;\\n    }\\n\\n    /**\\n     * @notice Accept the new role of governance\\n     * @dev `changeGovernance` must be called first to set `pendingGovernance`\\n     */\\n    function acceptGovernance() external {\\n        address _pendingGovernance = pendingGovernance;\\n        require(\\n            _pendingGovernance != address(0),\\n            \\\"changeGovernance must be called first\\\"\\n        );\\n        require(\\n            _msgSender() == _pendingGovernance,\\n            \\\"only pendingGovernance can accept this role\\\"\\n        );\\n        pendingGovernance = address(0);\\n        governance = _msgSender();\\n        emit SetGovernance(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xfbbc69c636bb7a4d4a8a0bfa0baddfe8c3f2fcdcfe86b8113b66b4d5ee805ab3\",\"license\":\"MIT\"},\"contracts/Vesting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts-4.2.0/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-4.2.0/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable-4.2.0/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-4.2.0/utils/Context.sol\\\";\\nimport \\\"./SimpleGovernance.sol\\\";\\n\\n/**\\n * @title Vesting\\n * @dev A token holder contract that can release its token balance gradually like a\\n * typical vesting scheme, with a cliff and vesting period. Owner has the power\\n * to change the beneficiary who receives the vested tokens.\\n */\\ncontract Vesting is Initializable, Context {\\n    using SafeERC20 for IERC20;\\n\\n    event Released(uint256 amount);\\n    event VestingInitialized(\\n        address indexed beneficiary,\\n        uint256 startTimestamp,\\n        uint256 cliff,\\n        uint256 duration\\n    );\\n    event SetBeneficiary(address indexed beneficiary);\\n\\n    // beneficiary of tokens after they are released\\n    address public beneficiary;\\n    IERC20 public token;\\n\\n    uint256 public cliffInSeconds;\\n    uint256 public durationInSeconds;\\n    uint256 public startTimestamp;\\n    uint256 public released;\\n\\n    /**\\n     * @dev Sets the beneficiary to _msgSender() on deploying this contract. This prevents others from\\n     * initializing the logic contract.\\n     */\\n    constructor() public {\\n        beneficiary = _msgSender();\\n    }\\n\\n    /**\\n     * @dev Limits certain functions to be called by governance\\n     */\\n    modifier onlyGovernance() {\\n        require(\\n            _msgSender() == governance(),\\n            \\\"only governance can perform this action\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initializes a vesting contract that vests its balance of any ERC20 token to the\\n     * _beneficiary, monthly in a linear fashion until duration has passed. By then all\\n     * of the balance will have vested.\\n     * @param _token address of the token that is subject to vesting\\n     * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\\n     * @param _cliffInSeconds duration in months of the cliff in which tokens will begin to vest\\n     * @param _durationInSeconds duration in months of the period in which the tokens will vest\\n     * @param _startTimestamp start timestamp when the cliff and vesting should start to count\\n     */\\n    function initialize(\\n        address _token,\\n        address _beneficiary,\\n        uint256 _startTimestamp,\\n        uint256 _cliffInSeconds,\\n        uint256 _durationInSeconds\\n    ) external initializer {\\n        require(_token != address(0), \\\"_token cannot be empty\\\");\\n        // dev: beneficiary is set to msg.sender on logic contracts during deployment\\n        require(beneficiary == address(0), \\\"cannot initialize logic contract\\\");\\n        require(_beneficiary != address(0), \\\"_beneficiary cannot be empty\\\");\\n        require(_startTimestamp != 0, \\\"startTimestamp cannot be 0\\\");\\n        require(\\n            _startTimestamp <= block.timestamp,\\n            \\\"startTimestamp cannot be from the future\\\"\\n        );\\n        require(_durationInSeconds != 0, \\\"duration cannot be 0\\\");\\n        require(\\n            _cliffInSeconds <= _durationInSeconds,\\n            \\\"cliff is greater than duration\\\"\\n        );\\n\\n        token = IERC20(_token);\\n        beneficiary = _beneficiary;\\n        startTimestamp = _startTimestamp;\\n        durationInSeconds = _durationInSeconds;\\n        cliffInSeconds = _cliffInSeconds;\\n\\n        emit VestingInitialized(\\n            _beneficiary,\\n            _startTimestamp,\\n            _cliffInSeconds,\\n            _durationInSeconds\\n        );\\n    }\\n\\n    /**\\n     * @notice Transfers vested tokens to beneficiary.\\n     */\\n    function release() external {\\n        uint256 vested = vestedAmount();\\n        require(vested > 0, \\\"No tokens to release\\\");\\n\\n        released = released + vested;\\n        emit Released(vested);\\n        token.safeTransfer(beneficiary, vested);\\n    }\\n\\n    /**\\n     * @notice Calculates the amount that has already vested but hasn't been released yet.\\n     */\\n    function vestedAmount() public view returns (uint256) {\\n        uint256 blockTimestamp = block.timestamp;\\n        uint256 _durationInSeconds = durationInSeconds;\\n\\n        uint256 elapsedTime = blockTimestamp - startTimestamp; // @dev startTimestamp is always less than blockTimestamp\\n\\n        if (elapsedTime < cliffInSeconds) {\\n            return 0;\\n        }\\n\\n        // If over vesting duration, all tokens vested\\n        if (elapsedTime >= _durationInSeconds) {\\n            return token.balanceOf(address(this));\\n        } else {\\n            uint256 currentBalance = token.balanceOf(address(this));\\n\\n            // If there are no tokens in this contract yet, return 0.\\n            if (currentBalance == 0) {\\n                return 0;\\n            }\\n\\n            uint256 totalBalance = currentBalance + released;\\n            uint256 vested = (totalBalance * elapsedTime) / _durationInSeconds;\\n            uint256 unreleased = vested - released;\\n\\n            return unreleased;\\n        }\\n    }\\n\\n    /**\\n     * @notice Changes beneficiary who receives the vested token.\\n     * @dev Only governance can call this function. This is to be used in case the target address\\n     * needs to be updated. If the previous beneficiary has any unclaimed tokens, the new beneficiary\\n     * will be able to claim them and the rest of the vested tokens.\\n     * @param newBeneficiary new address to become the beneficiary\\n     */\\n    function changeBeneficiary(address newBeneficiary) external onlyGovernance {\\n        require(\\n            newBeneficiary != beneficiary,\\n            \\\"beneficiary must be different from current one\\\"\\n        );\\n        require(newBeneficiary != address(0), \\\"beneficiary cannot be empty\\\");\\n        beneficiary = newBeneficiary;\\n        emit SetBeneficiary(newBeneficiary);\\n    }\\n\\n    /**\\n     * @notice Governance who owns this contract.\\n     * @dev Governance of the token contract also owns this vesting contract.\\n     */\\n    function governance() public view returns (address) {\\n        return SimpleGovernance(address(token)).governance();\\n    }\\n}\\n\",\"keccak256\":\"0xba244b14b240c6a742cf33a4777947248f12f506823f7e5aa45b90ce9d4e8a9b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101515760003560e01c806370a08231116100cd578063c643b57711610081578063d5dbfbd711610066578063d5dbfbd7146102dc578063dd62ed3e14610303578063f39c38a01461034957600080fd5b8063c643b577146102b6578063cea9d26f146102c957600080fd5b806399572d6f116100b257806399572d6f1461027d578063a457c2d714610290578063a9059cbb146102a357600080fd5b806370a082311461023f57806395d89b411461027557600080fd5b806323b872dd1161012457806332cb6b0c1161010957806332cb6b0c146101d557806339509351146101e75780635aa6e675146101fa57600080fd5b806323b872dd146101b3578063313ce567146101c657600080fd5b806306fdde0314610156578063095ea7b31461017457806318160ddd14610197578063238efcbc146101a9575b600080fd5b61015e610369565b60405161016b9190611971565b60405180910390f35b61018761018236600461184e565b6103fb565b604051901515815260200161016b565b6002545b60405190815260200161016b565b6101b1610411565b005b6101876101c136600461180d565b61058f565b6040516012815260200161016b565b61019b6a52b7d2dcc80cd2e400000081565b6101876101f536600461184e565b61065d565b60055461021a9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161016b565b61019b61024d3660046117b7565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b61015e6106a6565b6101b161028b3660046117b7565b6106b5565b61018761029e36600461184e565b610893565b6101876102b136600461184e565b610951565b61021a6102c436600461189c565b61095e565b6101b16102d736600461180d565b610bc5565b61021a7f000000000000000000000000000000000000000000000000000000000000000081565b61019b6103113660046117d4565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b60065461021a9073ffffffffffffffffffffffffffffffffffffffff1681565b60606003805461037890611a2d565b80601f01602080910402602001604051908101604052809291908181526020018280546103a490611a2d565b80156103f15780601f106103c6576101008083540402835291602001916103f1565b820191906000526020600020905b8154815290600101906020018083116103d457829003601f168201915b5050505050905090565b6000610408338484610f3a565b50600192915050565b60065473ffffffffffffffffffffffffffffffffffffffff16806104a25760405162461bcd60e51b815260206004820152602560248201527f6368616e6765476f7665726e616e6365206d7573742062652063616c6c65642060448201527f666972737400000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff82161461052d5760405162461bcd60e51b815260206004820152602b60248201527f6f6e6c792070656e64696e67476f7665726e616e63652063616e20616363657060448201527f74207468697320726f6c650000000000000000000000000000000000000000006064820152608401610499565b600680547fffffffffffffffffffffffff000000000000000000000000000000000000000090811690915560058054339216821790556040517f24a8c4807b324a269a51827c3446b8ac1cc13810d7d0c0ca1efafabddd7b621990600090a250565b600061059c8484846110b9565b73ffffffffffffffffffffffffffffffffffffffff84166000908152600160209081526040808320338452909152902054828110156106435760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206160448201527f6c6c6f77616e63650000000000000000000000000000000000000000000000006064820152608401610499565b6106508533858403610f3a565b60019150505b9392505050565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716845290915281205490916104089185906106a19086906119c2565b610f3a565b60606004805461037890611a2d565b60055473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107585760405162461bcd60e51b815260206004820152602760248201527f6f6e6c7920676f7665726e616e63652063616e20706572666f726d207468697360448201527f20616374696f6e000000000000000000000000000000000000000000000000006064820152608401610499565b60055473ffffffffffffffffffffffffffffffffffffffff828116911614156107e95760405162461bcd60e51b815260206004820152602d60248201527f676f7665726e616e6365206d75737420626520646966666572656e742066726f60448201527f6d2063757272656e74206f6e65000000000000000000000000000000000000006064820152608401610499565b73ffffffffffffffffffffffffffffffffffffffff811661084c5760405162461bcd60e51b815260206004820152601a60248201527f676f7665726e616e63652063616e6e6f7420626520656d7074790000000000006044820152606401610499565b600680547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b33600090815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff861684529091528120548281101561093a5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152608401610499565b6109473385858403610f3a565b5060019392505050565b60006104083384846110b9565b60055460009073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a045760405162461bcd60e51b815260206004820152602760248201527f6f6e6c7920676f7665726e616e63652063616e20706572666f726d207468697360448201527f20616374696f6e000000000000000000000000000000000000000000000000006064820152608401610499565b6000826080015111610a7e5760405162461bcd60e51b815260206004820152602560248201527f4c49423a206475726174696f6e20666f722076657374696e672063616e6e6f7460448201527f20626520300000000000000000000000000000000000000000000000000000006064820152608401610499565b6000610aa97f000000000000000000000000000000000000000000000000000000000000000061131e565b83516040808601516060870151608088015192517fd13f90b400000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff948516602482015260448101929092526064820152608481019190915291925082169063d13f90b49060a401600060405180830381600087803b158015610b4157600080fd5b505af1158015610b55573d6000803e3d6000fd5b5050506020840151610b6d91503090339084906113e1565b825160405173ffffffffffffffffffffffffffffffffffffffff8381168252909116907f739fe22b8edefd6ce1fe32460f9cd54bf8e66fc7447f4c8a8131ce078a1988af9060200160405180910390a290505b919050565b60055473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c685760405162461bcd60e51b815260206004820152602760248201527f6f6e6c7920676f7665726e616e63652063616e20706572666f726d207468697360448201527f20616374696f6e000000000000000000000000000000000000000000000000006064820152608401610499565b73ffffffffffffffffffffffffffffffffffffffff8216610ccb5760405162461bcd60e51b815260206004820152601660248201527f4c49423a20696e76616c696420726563697069656e74000000000000000000006044820152606401610499565b73ffffffffffffffffffffffffffffffffffffffff8316610e0757478115610cfc57610cf781836114bd565b610cfe565b805b915060008211610d505760405162461bcd60e51b815260206004820152601960248201527f4c49423a20747279696e6720746f2073656e64203020455448000000000000006044820152606401610499565b60008373ffffffffffffffffffffffffffffffffffffffff168360405160006040518083038185875af1925050503d8060008114610daa576040519150601f19603f3d011682016040523d82523d6000602084013e610daf565b606091505b5050905080610e005760405162461bcd60e51b815260206004820152601860248201527f4c49423a20455448207472616e73666572206661696c656400000000000000006044820152606401610499565b5050505050565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8516906370a082319060240160206040518083038186803b158015610e6f57600080fd5b505afa158015610e83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea7919061193c565b90508115610ebe57610eb981836114bd565b610ec0565b805b915060008211610f125760405162461bcd60e51b815260206004820152601d60248201527f4c49423a20747279696e6720746f2073656e6420302062616c616e63650000006044820152606401610499565b610f3373ffffffffffffffffffffffffffffffffffffffff851684846114d3565b505b505050565b73ffffffffffffffffffffffffffffffffffffffff8316610fc25760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610499565b73ffffffffffffffffffffffffffffffffffffffff821661104b5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610499565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff83166111425760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610499565b73ffffffffffffffffffffffffffffffffffffffff82166111cb5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610499565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260208190526040902054818110156112675760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152608401610499565b73ffffffffffffffffffffffffffffffffffffffff8085166000908152602081905260408082208585039055918516815290812080548492906112ab9084906119c2565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161131191815260200190565b60405180910390a3610f33565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528260601b60148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201526037816000f091505073ffffffffffffffffffffffffffffffffffffffff8116610bc05760405162461bcd60e51b815260206004820152601660248201527f455243313136373a20637265617465206661696c6564000000000000000000006044820152606401610499565b60405173ffffffffffffffffffffffffffffffffffffffff80851660248301528316604482015260648101829052610f339085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611529565b60008183106114cc5781610656565b5090919050565b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052610f359084907fa9059cbb000000000000000000000000000000000000000000000000000000009060640161143b565b600061158b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661161b9092919063ffffffff16565b805190915015610f3557808060200190518101906115a9919061187a565b610f355760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610499565b606061162a8484600085611632565b949350505050565b6060824710156116aa5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610499565b843b6116f85760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610499565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516117219190611955565b60006040518083038185875af1925050503d806000811461175e576040519150601f19603f3d011682016040523d82523d6000602084013e611763565b606091505b509150915061177382828661177e565b979650505050505050565b6060831561178d575081610656565b82511561179d5782518084602001fd5b8160405162461bcd60e51b81526004016104999190611971565b6000602082840312156117c957600080fd5b813561065681611a81565b600080604083850312156117e757600080fd5b82356117f281611a81565b9150602083013561180281611a81565b809150509250929050565b60008060006060848603121561182257600080fd5b833561182d81611a81565b9250602084013561183d81611a81565b929592945050506040919091013590565b6000806040838503121561186157600080fd5b823561186c81611a81565b946020939093013593505050565b60006020828403121561188c57600080fd5b8151801515811461065657600080fd5b600060a082840312156118ae57600080fd5b60405160a0810181811067ffffffffffffffff821117156118f8577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604052823561190681611a81565b80825250602083013560208201526040830135604082015260608301356060820152608083013560808201528091505092915050565b60006020828403121561194e57600080fd5b5051919050565b60008251611967818460208701611a01565b9190910192915050565b6020815260008251806020840152611990816040850160208701611a01565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b600082198211156119fc577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b500190565b60005b83811015611a1c578181015183820152602001611a04565b83811115610f335750506000910152565b600181811c90821680611a4157607f821691505b60208210811415611a7b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b73ffffffffffffffffffffffffffffffffffffffff81168114611aa357600080fd5b5056fea264697066735822122091430e6741ccf97e3cedc299cfc0cf36768ece981f1214ed7bacf7603867ae1d64736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptGovernance()": {
        "details": "`changeGovernance` must be called first to set `pendingGovernance`"
      },
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "changeGovernance(address)": {
        "details": "Only governance can call this function. The new governance must call `acceptGovernance` after.",
        "params": {
          "newGovernance": "new address to become the governance"
        }
      },
      "constructor": {
        "params": {
          "governance_": "address of the governance who will own this contract by the governance.",
          "vestingContractTarget_": "logic contract of Vesting.sol to use for cloning"
        }
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "deployNewVestingContract((address,uint256,uint256,uint256,uint256))": {
        "params": {
          "recipient": "Recipient of the token through the vesting schedule."
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "rescueTokens(address,address,uint256)": {
        "details": "Method to claim junk and accidentally sent tokens. This will be only used to rescue tokens that are mistakenly sent by users to this contract.",
        "params": {
          "balance": "Amount to transfer out. Set to 0 to select all available amount.",
          "to": "Destination address that will receive the tokens.",
          "token": "Address of the ERC20 token to transfer out. Set to address(0) to transfer ether instead."
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      }
    },
    "title": "libra DAO token",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptGovernance()": {
        "notice": "Accept the new role of governance"
      },
      "changeGovernance(address)": {
        "notice": "Changes governance of this contract"
      },
      "constructor": {
        "notice": "Initializes SDL token with specified governance address and recipients. For vesting durations and amounts, please refer to our documentation on token distribution schedule."
      },
      "deployNewVestingContract((address,uint256,uint256,uint256,uint256))": {
        "notice": "Deploys a clone of the vesting contract for the given recipient. Details about vesting and token release schedule can be found on https://docs.libra.finance"
      },
      "rescueTokens(address,address,uint256)": {
        "notice": "Transfers any stuck tokens or ether out to the given destination."
      }
    },
    "notice": "A token that is deployed with fixed amount and appropriate vesting contracts. Transfer is blocked for a period of time until the governance can toggle the transferability.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 199,
        "contract": "contracts/Libra.sol:Libra",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 205,
        "contract": "contracts/Libra.sol:Libra",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 207,
        "contract": "contracts/Libra.sol:Libra",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 209,
        "contract": "contracts/Libra.sol:Libra",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 211,
        "contract": "contracts/Libra.sol:Libra",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 1811,
        "contract": "contracts/Libra.sol:Libra",
        "label": "governance",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 1813,
        "contract": "contracts/Libra.sol:Libra",
        "label": "pendingGovernance",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}